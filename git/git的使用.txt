git clone -b br_Non-Commercial_AC-WANV3R2C00_Polkomtel380 git@rnd-isourceb.huawei.com:yWX373151/AC_BP_trunk_ac_bp_web.git

添加远程仓
git remote add trunk git@rnd-isourceb.huawei.com:AC_BP_trunk/ac_bp_web.git
git remote -v 查看远程仓信息
git remote show 查看本地定义的远程仓名
git remote show source 查看source远程仓与本地的信息

本地新建分支，并上传到远程仓上
git checkout -b new_local_br
此时git push失败，需要执行下面，在远程仓上也新建了分支，并与本地分支保持跟踪
git push --set-upstream origin new_remote_br
后面就可以直接git push

关联远程分支前，先提取fetch远程分支数据，在关联分支--set-upstream
git fetch origin br
git branch --set-upstream-to local_br origin/br (远程分支要存在，否则失败)

git fetch 远程仓 远程分支
git checkout -b 本地分支 远程仓/远程分支

git merge 本地另一分支
git checkout 本地另一分支 路径|文件名

如果只是简单的将feature分支的文件f.txt copy到master分支上；
git checkout master
git checkout feature f.tx

git stash list
git stash save "xxx"
git stash show
git stash apply stash@{0}
git stash drop stash@{0}

文件从暂存区回退到工作区
git reset HEAD  
回退文件，将文件从暂存区回退到工作区
git reset HEAD filename   
回退版本，一个^表示一个版本，可以多个，另外也可以使用 git reset HEAD～n这种形式
git reset HEAD^   
意为将版本库回退1个版本，但是不仅仅是将本地版本库的头指针全部重置到指定版本，也会重置暂存区，并且会将工作区代码也回退到这个版本
git reset --hard HEAD～1
意为将版本库软回退1个版本，所谓软回退表示将本地版本库的头指针全部重置到指定版本，且将这次提交之后的所有变更都移动到暂存区
git reset --soft HEAD～1 

git core.autocrlf配置说明
格式化

格式化是许多开发人员在协作时，特别是在跨平台情况下，遇到的令人头疼的细小问题。 由于编辑器的不同或者Windows程序员在跨平台项目中的文件行尾加入了回车换行符， 一些细微的空格变化会不经意地进入大家合作的工作或提交的补丁中。不用怕，Git的一些配置选项会帮助你解决这些问题。

core.autocrlf

假如你正在Windows上写程序，又或者你正在和其他人合作，他们在Windows上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾 结束符问题。 这是因为Windows使用回车和换行两个字符来结束一行，而Mac和Linux只使用换行一个字符。 虽然这是小问题，但它会极大地扰乱跨平台协作。

Git可以在你提交时自动地把行结束符CRLF转换成LF，而在签出代码时把LF转换成CRLF。用core.autocrlf来打开此项功能， 如果是在Windows系统上，把它设置成true，这样当签出代码时，LF会被转换成CRLF：

$ git config --global core.autocrlf true

Linux或Mac系统使用LF作为行结束符，因此你不想Git在签出文件时进行自动的转换；当一个以CRLF为行结束符的文件不小心被引入时你肯定想进行修正， 把core.autocrlf设置成input来告诉Git在提交时把CRLF转换成LF，签出时不转换：

$ git config --global core.autocrlf input

这样会在Windows系统上的签出文件中保留CRLF，会在Mac和Linux系统上，包括仓库中保留LF。

如果你是Windows程序员，且正在开发仅运行在Windows上的项目，可以设置false取消此功能，把回车符记录在库中：

$ git config --global core.autocrlf false

转自：http://www.qinbin.me/git-core-autocrlf配置说明/
