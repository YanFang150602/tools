js基础--常用的DOM操作  
摘要： 一、了解DOM 1. JavaScript的组成 BOM 既（Browser Object Model）浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。 DOM 和 BOM 的区别 DOM 文档对象模型 DOM 就是把 文档 当作一个 对象 来看待 DOM 的顶级对象是 document DOM 主要是操作页面元素 DOM 是 W3C 组织的标准 BOM 浏览器对象模型 把 浏览器 当作一个 对象 来看待 BOM 的顶级对象是 window BOM 主要是浏览器窗口交互的一些对象 BOM

一、了解DOM
1. JavaScript的组成

BOM 既（Browser Object Model）浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。
• DOM 和 BOM 的区别
DOM
• 文档对象模型
• DOM 就是把 文档 当作一个 对象 来看待
• DOM 的顶级对象是 document
• DOM 主要是操作页面元素
• DOM 是 W3C 组织的标准
BOM
• 浏览器对象模型
• 把 浏览器 当作一个 对象 来看待
• BOM 的顶级对象是 window
• BOM 主要是浏览器窗口交互的一些对象
• BOM 是浏览器厂商在各自浏览器上定义的，所以兼容性较差

2. Web API
• Web API 是 W3C 组织的标准。
• Web API 是浏览器提供的一套操作浏览器功能和页面元素的API（BOM和DOM）。
• Web API 一般都有输入和输出，Web API 很多都是方法（函数）。
3. 什么是DOM
文档对象模型（Document Object Model），对于 JavaScript ，为了使其能够操作 HTML，W3C 组织制定一套处理 HTML 或 XML 的标准编程接口。
W3C 为我们定义好了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页元素的内容、结构、样式。
对于 HTML， DOM 使得 HTML 形成了一颗 DOM 树，包含 文档、元素、节点。
DOM树

• 文档：一个页面就是一个文档，DOM 中用 document 表示。
• 元素：页面中所有的标签，DOM 中用 element 表示。
• 节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM 中使用 node 表示。
DOM 把以上的内容都看作是对象，包含了许多属性和方法，所以称其为 文档对象模型。

关于 DOM 操作，我们主要是针对元素的操作。主要有创建、增、删、改、查、属性操作、事件操作。

二、操作 DOM
1. 获取 DOM

1	// 利用 DOM 提供的方法
2	getElementById();
3	getElementsByTagName();
4	
5	getElementByClassName();
6	querySelector();
7	querySelectorAll();
8	
9	document.body;
10	document.documentElement;
11	
12	// 利用节点层次关系
13	child.parentNode
14	parent.childNodes
15	parent.children
16	parent.firstChild
17	parent.lastChild
18	parent.firstElementChild
19	parent.lastElementChild
20	child.previousElementSibling
21	child.nextElementSibling

2. 创建 DOM 节点

1	// 创建由 tagName 指定的 HTML 元素。因为这些元素原来不存在，是根据我们的需求动态生成的，所以我们也称为动态创建元素节点。
2	document.createElement('tagName')
3	
4	// 将内容写入某个 DOM 节点，不会导致页面全部重绘
5	// 创建多个元素效率更高
6	node.innerHTML
7	
8	// 直接将内容写入页面，但是文档流加载完毕时，则会导致页面重绘
9	document.write('tagName')
3. 添加 DOM 节点

1	// 将一个节点添加到指定父节点的子节点列表末尾。
2	node.appendChild(child)
3	
4	// 将一个节点添加到父节点的指定子节点前面。
5	node.insertBefore(child, 指定元素)
6	
7	// 克隆节点(括号内参数为空或false则为浅拷贝，不克隆里面的子节点；为true是深拷贝)。
8	node.cloneNode()
4. 删除节点

1	// 从 DOM 中删除一个子节点，返回删除的节点。
2	node.removeChild(child)
5. 修改节点
修改 DOM 的元素属性，DOM 元素的内容、属性，表单的值等。
1. 修改元素的属性：src、href、title等
2. 修改普通元素内容：innerHTML、innerText
3. 修改表单元素：value、type、disabled
4. 修改元素样式：style、className

三、拓展
HTML页面的重绘和重排(回流)

1. 浏览器渲染页面的机制
1. 构建DOM树（parse）：渲染引擎解析HTML文档，首先将标签转换成DOM树中的DOM node（包括js生成的标签）生成内容树（Content Tree/DOM Tree）；
2. 构建渲染树（construct）：解析对应的CSS样式文件信息（包括js生成的样式和外部css文件），而这些文件信息以及HTML中可见的指令（如），构建渲染树（Rendering Tree/Frame Tree）；render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有head节点)，因为这些节点不会用于呈现
3. 布局渲染树（reflow/layout）：从根节点递归调用，计算每一个元素的大小、位置等，给出每个节点所应该在屏幕上出现的精确坐标；
4. 绘制渲染树（paint/repaint）：遍历渲染树，使用UI 层来绘制每个节点。
2. 重绘（repaint或redraw）
当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些元素都按照各自的特性绘制一遍，将内容呈现在页面上。
重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。
触发重绘的条件：改变元素外观属性。如：color，background-color等。
3. 重排（重构/回流/reflow）
当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为重排(reflow)。每个页面至少需要一次重排，就是在页面第一次加载的时候。
4. 二者的关系
在重排的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成重排后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。所以，重排必定会引发重绘，但重绘不一定会引发重排。
触发重排的条件：任何页面布局和几何属性的改变都会触发重排，比如：
1. 页面渲染初始化；(无法避免)
2. 添加或删除可见的DOM元素
3. 元素位置的改变，或者使用动画
4. 元素尺寸的改变——大小，外边距，边框
5. 浏览器窗口尺寸的变化（resize事件发生时）
6. 填充内容的改变，比如文本的改变或图片大小改变而引起的计算值宽度和高度的改变
7. 读取某些元素属性：（offsetLeft/Top/Height/Width,　clientTop/Left/Width/Height, scrollTop/Left/Width/Height,　width/height,　getComputedStyle(),　currentStyle(IE) )
重绘重排的代价：耗时，导致浏览器卡慢。
5. 优化
1、浏览器自己的优化：浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。
2、我们要注意的优化：我们要减少重绘和重排就是要减少对渲染树的操作，则我们可以合并多次的DOM和样式的修改。并减少对style样式的请求。
（1）直接改变元素的className
（2）display：none；先设置元素为display：none；然后进行页面布局等操作；设置完成后将元素设置为display：block；这样的话就只引发两次重绘和重排；
（3）使用cloneNode(true or false) 和 replaceChild 技术，引发一次回流和重绘；
（4）将需要多次重排的元素，position属性设为absolute或fixed，元素脱离了文档流，它的变化不会影响到其他元素；
（5）如果需要创建多个DOM节点，可以使用DocumentFragment创建完后一次性的加入document；
建议不要边循环边渲染
  var fragment = document.createDocumentFragment();
  for(let i=0;i<100;i++){
    var li = document.createElement('li');
    li.innerHTML = 'apple'+i;
    fragment.appendChild(li);
  }
  document.getElementById('fruit').appendChild(fragment);

